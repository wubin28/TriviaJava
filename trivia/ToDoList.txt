Done: Find all public methods of the class Game.
Done: Find all public methods of class Game called by the client GameRunner and understand the behaviours of them by reading the code.
  GameRunner.main()
    Add 3 players to the game.
    If the game is not over, do the following repeatedly.
      Roll a dice and call method roll().
      If the current player is not lucky, call method wrongAnswer() and buffer the status if we continue the game.
      If the current player is lucky, call method wasCorrectlyAnswered() and buffer the status if we continue the game.
  Game.add()
    Add the player.
    Initialize place, purse, and inPenaltyBox for this player.
  Game.roll()
    Determine if the current player will get out of the penalty box according to the dice roll number.
    Determine the place of the current player according to the dice roll number.
    Determine the category of the question according to the value of the place of the current player.
    Ask a question.
  Game.wrongAnswer()
    Send the current player to a penalty box.
    Determine the next player.
    Continue the game.
  Game.wasCorrectlyAnswered()
    Present a gold coin to the current player due to answering the question correctly.
    Determine the next player.
    Determine if continue the game.
Done: Find all pieces of the major logic which are not going to be modified from the running of the client and the code of the methods above and write characterization tests for all of them.
  Done: The order in which the players roll the dice is the same as the order in which they are added to the game.
    Game.addPlayer()
    Game.roll()
    Game.wasCorrectlyAnswered()
  Done: Present a gold coin if the current player answers the question correctly.
    Game.addPlayer()
    Game.roll()
    Game.wasCorrectlyAnswered()
  Done: Send to the penalty box and cannot answer a question if the current player answers the question wrong.
    Game.addPlayer()
    Game.roll()
    Game.wrongAnswer()
  Done: If the current player is in the penalty box and the number of dice-rolling of this player is divisible by 2, the player cannot get out of the penalty box and cannot answer a question.
    Game.addPlayer()
    Game.roll()
    Game.wrongAnswer()
    Game.wasCorrectlyAnswered()
  Done: If the current player is in the penalty box and the number of dice-rolling of this player cannot be divisible by 2, the player will get out of the penalty box and can answer a question.
    Game.addPlayer()
    Game.roll()
    Game.wrongAnswer()
    Game.wasCorrectlyAnswered()
  Done: The game will be over if as soon as any player gets 6 gold coins.
    Game.addPlayer()
    Game.roll()
    Game.wasCorrectlyAnswered()
Done: List all public method names for each major logic above.
Done: Use Sonar to fix all Major and more severe issues.
Done: Eliminate all duplicated code.
Find all the nouns from the descriptions of all the major logic and use them to be the candidates of classes
  * Game
    * Game Board
      * Penalty Box
    * Player, Done
      * Purse
    * Dice
    * Gold Coin
    * QuestionMaker, Done
      * Question
  * GameRunner
Done: Check the test code and make the access modifiers of all fields of the Game class to be private.

==============
Design patterns
* Observer
* State
* Strategy
* Chain of Responsibility
===============
Done: Draw the effect sketches of the public methods above to find out all the variables and methods which effect the return values of these public methods.

Write a characterization test for the pinch point in the effect sketches above. Need not mention the intents of the test in the name of the test. And write a blank expected values in the characterization test. Since those are what the characterization test is supposed to do.
After the characterization test fails, get the actual value from the error message of the test. Use the actual value as the expected value and update the characterization test accordingly and make the test pass.
Update the name of the characterization test with the intents of the test.
Update the test code to reflect the expected activity.
Drive the refactoring of the productive code by the updated test above.
  Break the class Game down into several classes according to responsibilities
  "They are player ..." should be "There are player ...".
  "Answer was corrent..." should be "Answer was correct...".
  Rename method wasCorrectlyAnswered() to be isGameOver().

